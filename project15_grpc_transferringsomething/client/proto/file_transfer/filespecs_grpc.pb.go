// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: filespecs.proto

package file_transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// File_TransferClient is the client API for File_Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type File_TransferClient interface {
	SendFile(ctx context.Context, in *File_Info, opts ...grpc.CallOption) (*Status, error)
}

type file_TransferClient struct {
	cc grpc.ClientConnInterface
}

func NewFile_TransferClient(cc grpc.ClientConnInterface) File_TransferClient {
	return &file_TransferClient{cc}
}

func (c *file_TransferClient) SendFile(ctx context.Context, in *File_Info, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/File_Transfer/SendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// File_TransferServer is the server API for File_Transfer service.
// All implementations must embed UnimplementedFile_TransferServer
// for forward compatibility
type File_TransferServer interface {
	SendFile(context.Context, *File_Info) (*Status, error)
	mustEmbedUnimplementedFile_TransferServer()
}

// UnimplementedFile_TransferServer must be embedded to have forward compatible implementations.
type UnimplementedFile_TransferServer struct {
}

func (UnimplementedFile_TransferServer) SendFile(context.Context, *File_Info) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedFile_TransferServer) mustEmbedUnimplementedFile_TransferServer() {}

// UnsafeFile_TransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to File_TransferServer will
// result in compilation errors.
type UnsafeFile_TransferServer interface {
	mustEmbedUnimplementedFile_TransferServer()
}

func RegisterFile_TransferServer(s grpc.ServiceRegistrar, srv File_TransferServer) {
	s.RegisterService(&File_Transfer_ServiceDesc, srv)
}

func _File_Transfer_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File_Info)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(File_TransferServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/File_Transfer/SendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(File_TransferServer).SendFile(ctx, req.(*File_Info))
	}
	return interceptor(ctx, in, info, handler)
}

// File_Transfer_ServiceDesc is the grpc.ServiceDesc for File_Transfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_Transfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "File_Transfer",
	HandlerType: (*File_TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFile",
			Handler:    _File_Transfer_SendFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filespecs.proto",
}
