// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: filespecs.proto

package file_transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// File_TransferClient is the client API for File_Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type File_TransferClient interface {
	SendFile(ctx context.Context, opts ...grpc.CallOption) (File_Transfer_SendFileClient, error)
}

type file_TransferClient struct {
	cc grpc.ClientConnInterface
}

func NewFile_TransferClient(cc grpc.ClientConnInterface) File_TransferClient {
	return &file_TransferClient{cc}
}

func (c *file_TransferClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (File_Transfer_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_Transfer_ServiceDesc.Streams[0], "/File_Transfer/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &file_TransferSendFileClient{stream}
	return x, nil
}

type File_Transfer_SendFileClient interface {
	Send(*File_Info) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type file_TransferSendFileClient struct {
	grpc.ClientStream
}

func (x *file_TransferSendFileClient) Send(m *File_Info) error {
	return x.ClientStream.SendMsg(m)
}

func (x *file_TransferSendFileClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// File_TransferServer is the server API for File_Transfer service.
// All implementations must embed UnimplementedFile_TransferServer
// for forward compatibility
type File_TransferServer interface {
	SendFile(File_Transfer_SendFileServer) error
	mustEmbedUnimplementedFile_TransferServer()
}

// UnimplementedFile_TransferServer must be embedded to have forward compatible implementations.
type UnimplementedFile_TransferServer struct {
}

func (UnimplementedFile_TransferServer) SendFile(File_Transfer_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedFile_TransferServer) mustEmbedUnimplementedFile_TransferServer() {}

// UnsafeFile_TransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to File_TransferServer will
// result in compilation errors.
type UnsafeFile_TransferServer interface {
	mustEmbedUnimplementedFile_TransferServer()
}

func RegisterFile_TransferServer(s grpc.ServiceRegistrar, srv File_TransferServer) {
	s.RegisterService(&File_Transfer_ServiceDesc, srv)
}

func _File_Transfer_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(File_TransferServer).SendFile(&file_TransferSendFileServer{stream})
}

type File_Transfer_SendFileServer interface {
	SendAndClose(*Status) error
	Recv() (*File_Info, error)
	grpc.ServerStream
}

type file_TransferSendFileServer struct {
	grpc.ServerStream
}

func (x *file_TransferSendFileServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *file_TransferSendFileServer) Recv() (*File_Info, error) {
	m := new(File_Info)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// File_Transfer_ServiceDesc is the grpc.ServiceDesc for File_Transfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_Transfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "File_Transfer",
	HandlerType: (*File_TransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _File_Transfer_SendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "filespecs.proto",
}
